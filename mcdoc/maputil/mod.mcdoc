type CommandStorage<T> = struct {
  root: T
}

dispatch :storage[maputil:aec] to CommandStorage<:entity[area_effect_cloud]>

dispatch :storage[maputil:player_data] to CommandStorage<PlayerData>
struct PlayerData {
  [#[dispatcher_key="maputil:player_data"] string]: maputil:player_data[[%key]]
}
dispatch maputil:player_data[%unknown] to any

dispatch :storage[maputil:_] to CommandStorage<InternalStorage>
struct InternalStorage {
  [#[dispatcher_key="maputil:_storage"] string]: maputil:_storage[[%key]]
}
dispatch maputil:_storage[%unknown] to any

dispatch maputil:_storage[macro] to struct MacroParam {
  id?: int @ 1..
}
dispatch maputil:_storage[player_data] to struct PlayerDatabase {
  [#[integer(min=1)] string]: PlayerData
}
dispatch maputil:_storage[marker_data] to :entity[marker][data]


dispatch mcdoc:custom_data[maputil] to struct ItemData {
  [#[dispatcher_key="maputil:_item_data"] string]: maputil:_item_data[[%key]]
}
dispatch maputil:_item_data[%unknown] to any

dispatch maputil:_item_data[translated] to struct {
  "_"?: int
}


dispatch mcdoc:marker_data[interaction] to struct InteractionReactions {
  left_click?: ClickReactions,
  right_click?: ClickReactions,
  mutual_exclusive?: boolean
}
struct ClickReactions {
  this?: CallbackFunction,
  player?: CallbackFunction
}
struct CallbackFunction {
  function: #[id(registry="function", tags="allowed")] string
}
